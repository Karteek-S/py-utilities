version: '3'

# === Variables ===
vars:
  PYTHON_VERSION: '{{.PYTHON_VERSION | default "3.10.11"}}'
  VENV_DIR: '{{.VENV_DIR | default ".venv"}}'
  REQUIREMENTS: '{{.REQUIREMENTS | default "requirements.txt"}}'
  PYTHON: sh:pyenv which python || echo "python3"

# === Tasks ===
tasks:
  # üîß Default: show list of available tasks
  default:
    desc: "List available tasks"
    cmds:
      - task --list
    silent: true

  # üõ†Ô∏è Setup
  # Core check for all setups
  setup:check:core:
    desc: "Check pyenv and required Python version"
    cmds:
      - '{{.TASKFILE_DIR}}/Scripts/setups/check-core.sh "{{.PYTHON_VERSION}}"'
    internal: true

  # For downstream tasks: require venv
  setup:check:require:
    desc: "Check that .venv exists and verify python versions"
    cmds:
      - '{{.TASKFILE_DIR}}/Scripts/setups/check-require.sh "{{.PYTHON_VERSION}}" "{{.VENV_DIR}}"'
    internal: true

  # For setup:init: venv must not already exist
  setup:check:init:
    desc: "Check that .venv does NOT exist (safe to create)"
    cmds:
      - '{{.TASKFILE_DIR}}/Scripts/setups/check-init.sh "{{.VENV_DIR}}"'
    internal: true

  # Publicly used check task (for install/lint/test/etc)
  setup:check:
    desc: "Validate Python version and venv presence"
    deps: [setup:check:core, setup:check:require]
    internal: true

  # Internal init
  setup:init:
    desc: "Initialize .python-version and venv (if safe)"
    deps: [setup:check:core, setup:check:init]
    cmds:
      - 'pyenv local {{.PYTHON_VERSION}}'
      - '{{.PYTHON}} -m venv {{.VENV_DIR}}'
    internal: true

  # üì¶ Dependencies
  deps:install:
    desc: "Install dependencies into venv"
    deps: [setup:check]
    cmds:
      - '{{.VENV_DIR}}/bin/pip install --upgrade pip'
      - '{{.VENV_DIR}}/bin/pip install -r {{.REQUIREMENTS}}'
      - 'echo "‚úÖ Dependencies installed"'
    internal: true

  # üé® Code Quality
  quality:format:
    desc: "Run black and ruff to format code"
    deps: [setup:check]
    cmds:
      - '{{.VENV_DIR}}/bin/black .'
      - '{{.VENV_DIR}}/bin/ruff check . --fix'
      - 'echo "üé® Code formatted"'
    internal: true

  quality:lint:
    desc: "Run ruff and mypy for linting and static checks"
    deps: [setup:check]
    cmds:
      - '{{.VENV_DIR}}/bin/ruff check .'
      - '{{.VENV_DIR}}/bin/mypy .'
      - 'echo "üßπ Lint checks passed"'
    internal: true

  quality:check:
    desc: "Run lint and test tasks"
    deps: [quality:lint, test:run]
    internal: true

  # üß™ Testing
  test:run:
    desc: "Run pytest"
    deps: [setup:check]
    cmds:
      - '{{.VENV_DIR}}/bin/pytest'
    internal: true

  # üßº Cleanup
  clean:venv:
    desc: "Remove the virtual environment"
    cmds:
      - 'rm -rf {{.VENV_DIR}}'
      - 'echo "üßπ Removed virtual environment"'

  clean:pycache:
    desc: "Remove Python bytecode and __pycache__"
    cmds:
      - 'find . -type d -name "__pycache__" -exec rm -rf {} +'
      - 'find . -type f -name "*.pyc" -delete'
      - 'echo "üßπ Removed __pycache__ and .pyc files"'

  clean:dist:
    desc: "Remove dist and build artifacts"
    cmds:
      - 'rm -rf dist/ build/ *.egg-info'
      - 'echo "üßπ Removed dist and build folders"'

  # üè∑ Public Aliases (with helpful descriptions)
  setup:
    desc: "Set up Python environment (pyenv + venv)"
    deps: [setup:init]

  install:
    desc: "Install dependencies into virtual environment"
    deps: [deps:install]

  format:
    desc: "Format Python code using black and ruff"
    deps: [quality:format]

  lint:
    desc: "Run ruff and mypy for linting and type checks"
    deps: [quality:lint]

  check:
    desc: "Run all quality checks: lint and test"
    deps: [quality:check]

  test:
    desc: "Run pytest test suite"
    deps: [test:run]

  clean:
    desc: "Run all cleanups: venv, pycache, dist"
    deps: [clean:venv, clean:dist]