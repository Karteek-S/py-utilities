version: '3'

# === Variables ===
vars:
  PYTHON_VERSION: '{{.PYTHON_VERSION | default "3.10.11"}}'
  VENV_DIR: '{{.VENV_DIR | default ".venv"}}'
  REQUIREMENTS: '{{.REQUIREMENTS | default "requirements.txt"}}'
  PYTHON: sh:pyenv which python || echo "python3"

# === Tasks ===
tasks:
  # üîß Default: show list of available tasks
  default:
    desc: "List available tasks"
    cmds:
      - task --list
    silent: true

  # üõ†Ô∏è Setup (alias + internals)
  setup:
    desc: "Initialize Python environment using pyenv and venv"
    deps: [setup:init]

  setup:init:
    desc: "Full setup: pyenv, version check, venv"
    deps: [setup:pyenv, setup:check, setup:venv]
    internal: true

  setup:pyenv:
    desc: "Set local pyenv Python version"
    cmds:
      - 'pyenv local {{.PYTHON_VERSION}}'
      - 'echo "‚úÖ Set local Python version to {{.PYTHON_VERSION}}"'
    internal: true

  setup:check:
    desc: "Check if the required pyenv version is installed"
    cmds:
      - |
        if pyenv versions --bare | grep -qx '{{.PYTHON_VERSION}}'; then
          echo "‚úÖ Python {{.PYTHON_VERSION}} is available via pyenv"
        else
          echo "‚ùå Python {{.PYTHON_VERSION}} not installed in pyenv"
          exit 1
        fi
    internal: true

  setup:venv:
    desc: "Create virtual environment if it doesn't exist"
    deps: [setup:check]
    cmds:
      - |
        if [ ! -d "{{.VENV_DIR}}" ]; then
          {{.PYTHON}} -m venv {{.VENV_DIR}}
          echo "‚úÖ Created virtual environment at {{.VENV_DIR}}"
        else
          echo "‚ÑπÔ∏è Virtual environment already exists at {{.VENV_DIR}}"
        fi
    internal: true

  # üì¶ Dependencies
  deps:install:
    desc: "Install dependencies into venv"
    deps: [setup:venv]
    cmds:
      - '{{.VENV_DIR}}/bin/pip install --upgrade pip'
      - '{{.VENV_DIR}}/bin/pip install -r {{.REQUIREMENTS}}'
      - 'echo "‚úÖ Dependencies installed"'
    internal: true

  # üé® Code Quality
  quality:format:
    desc: "Run black and ruff to format code"
    deps: [setup:venv]
    cmds:
      - '{{.VENV_DIR}}/bin/black .'
      - '{{.VENV_DIR}}/bin/ruff check . --fix'
      - 'echo "üé® Code formatted"'
    internal: true

  quality:lint:
    desc: "Run ruff and mypy for linting and static checks"
    deps: [setup:venv]
    cmds:
      - '{{.VENV_DIR}}/bin/ruff check .'
      - '{{.VENV_DIR}}/bin/mypy .'
      - 'echo "üßπ Lint checks passed"'
    internal: true

  quality:check:
    desc: "Run lint and test tasks"
    deps: [quality:lint, test:run]
    internal: true

  # üß™ Testing
  test:run:
    desc: "Run pytest"
    deps: [setup:venv]
    cmds:
      - '{{.VENV_DIR}}/bin/pytest'
    internal: true

  # üßº Cleanup
  clean:venv:
    desc: "Remove the virtual environment"
    cmds:
      - 'rm -rf {{.VENV_DIR}}'
      - 'echo "üßπ Removed virtual environment"'

  # üè∑ Public Aliases (with helpful descriptions)
  install:
    desc: "Install dependencies into virtual environment"
    deps: [deps:install]

  format:
    desc: "Format Python code using black and ruff"
    deps: [quality:format]

  lint:
    desc: "Run ruff and mypy for linting and type checks"
    deps: [quality:lint]

  check:
    desc: "Run all quality checks: lint and test"
    deps: [quality:check]

  test:
    desc: "Run pytest test suite"
    deps: [test:run]